<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威中文论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>


<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_3.htm">上一页</a>
<a class="pagelink" href="paper_5.htm">下一页</a>
<a class="pagelink" href="paper_14.htm">尾页</a>
页码：4/14页
]
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">131</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>基于REST的Web Service:</span><span class='green'>RT Fielding博士在其博士论文”Architectural Styles and the Design of Network-based Software Architectures[25]”中首次提出了REST风格的Web Service的基本概念。</span><a href='../sentence_detail/293.htm' target='right' class='orange' >REST是表述性状态转移的缩写，REST风格具有以下几个特点：</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">132</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/294.htm' target='right' class='orange' >（1）首先，REST是一种架构风格，不是一个具体的标准；</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">133</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（2）REST风格是基于资源的架构风格；</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">134</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/296.htm' target='right' class='orange' >（3）REST架构风格的目的是实现一个组织良好的Web应用程序；</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">135</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/297.htm' target='right' class='orange' >（4）REST架构风格是对HTTP协议的真正充分利用：</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">136</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（a）它逻辑上通过URI来定位资源；</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">137</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（b）它通过HTTP请求头信息来判断客户端需要获取何种资源或是对资源进行何种操作；</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">138</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（ c）在 REST风格体系中，使用不同 HTTP的请求方法来实现 CRUD操作（增删改查操作），具体而言，</span><a href='../sentence_detail/301.htm' target='right' class='orange' > GET操作可以获取资源， POST操作可以添加资源， PUT操作可以更新资源， DELETE操作可以删除资源，等等。</a><span class='green'>REST风格的CRUD操作如图2.2所示。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">139</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图2.2 REST风格的CRUD操作</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">140</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>REST架构风格的以上特点使它比基于 SOAP的 Web Service更简单，更轻量，更能够完全地利用 HTTP协议，</span><span class='green'>REST风格实际上代表了 HTTP设计之初的真正意图，因此，近年来 REST风格的 Web Service已经完全改变了 Web Service的状况，</span><span class='green'>极大地适应了移动互联网的发展趋势，现在，主流的移动客户端开发都已经从 SOAP向 REST架构风格进行迁移。</span><a href='../sentence_detail/307.htm' target='right' class='orange' >在我们的指纹认证系统中，为了配合android客户端的开发，服务器端同样也将采用REST风格的Web Service实现。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">141</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.9 Nancy Framework</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">142</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>我们使用Nancy Framework来实现轻量级的REST风格Web Service.</span><span class='green'>Nancy Framework是一个基于.net和mono平台的轻量级的Web框架，它遵循MVC模式[26]并被设计用来支持REST风格的Web Service.</span><span class='green'>Nancy官方网站对Nancy框架的特征介绍如下：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">143</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/312.htm' target='right' class='red' >（1） Nancy 是一个轻量级用于构建基于HTTP的Web服务，基于 .</a><span class='green'>NET 和 Mono 平台，框架的目标是保持尽可能多的方式，并提供一个super-duper-happy-path所有交互。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">144</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（2）Nancy 设计用于处理DELETE， GET， HEAD， OPTIONS， POST， PUT和PATCH  等请求方法，并提供简单优雅的DSL[27]以返回响应。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">145</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/315.htm' target='right' class='red' >（3）Nancy和Asp.net MVC原理相似，但有自己的一套路由机制，在使用上更加易用，可以用Nancy快速开发一些网站。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">146</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/316.htm' target='right' class='red' >（4）Nancy并不依赖任何现有的框架，所以他可以运行在任何平台上面。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">147</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>下面介绍Nancy框架的核心思想。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">148</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.10.7 MVC</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">149</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/319.htm' target='right' class='orange' >Nancy框架的设计灵感来源于Ruby中的Sinatra框架[28]，他们的基本思想都是MVC模式，MVC模式是模型－视图－控制器模式的缩写。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">150</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/320.htm' target='right' class='orange' >模型是应用系统用于描述数据逻辑的部分，通常用于封装数据对象以存储数据。</a><span class='green'>视图是应用系统中描述显示逻辑的部分，视图负责展示给用户的界面逻辑，视图中的数据通常通过模型层获取。</span><a href='../sentence_detail/322.htm' target='right' class='orange' >控制器是应用系统中业务逻辑处理的部分，负责从视图中读取数据，处理用户输入跳转，</a><a href='../sentence_detail/323.htm' target='right' class='orange' >将数据发送给模型等业务逻辑处理，是系统的控制中枢，也是 MVC模式的核心部分。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">151</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图2.3 MVC核心工作流</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">152</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/325.htm' target='right' class='orange' >图2.3展示了MVC模式的核心工作流：</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">153</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/326.htm' target='right' class='orange' >（1）首先，用户向应用程序程序发送请求，等待服务端响应</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">154</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/327.htm' target='right' class='orange' >（2）控制器接收用户请求，然后由控制器决定是从模型中读取数据还是直接将用户请求交给对应的视图进行响应。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">155</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/328.htm' target='right' class='orange' >（3）控制器向模型层发送数据请求。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">156</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/329.htm' target='right' class='orange' >（4）模型层从数据库中读取请求的数据，并将获取到数据返回给控制器。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">157</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/330.htm' target='right' class='orange' >（5）控制器将模型返回的数据发送给响应的处理视图。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">158</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（6）视图层通过从模型中获取数据填充视图内容，并将最终的HTML结果返回给控制器。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">159</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/332.htm' target='right' class='orange' >（7）控制器将结果视图返回给用户。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">160</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>通过MVC模式，实现了应用系统业务逻辑和表现逻辑的分离[29]，数据逻辑和数据库系统的分离，因此降低了模块之间的耦合性，也便于前后端开发人员的相互协作[30]。</span><span class='green'>因此越来越多的应用系统采用MVC模式实现，于此同时也产生了大量优秀的遵循MVC模式的框架，如Ruby on Rails[31]， Java Spring MVC，ASP.net MVC等等。</span><span class='green'>我们所采用的Nancy框架也是.net平台上的一个轻量级的MVC框架。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">161</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.10.8 Nancy框架中的MVC实现</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">162</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/337.htm' target='right' class='orange' >Nancy框架是.net平台下基于MVC模式的轻量级Web框架，一个Nancy项目结构如图2.4所示。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">163</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图2.4 Nancy项目结构</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">164</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>在Nancy框架中，Model表示模型模块，Views表示视图模块，Module表示控制器模块。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">165</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/340.htm' target='right' class='orange' >（1）控制器遵循REST风格，其基本的工作模式是：</a><span class='green'>当用户在浏览器中请求http:</span><span class='green'>// hostaddress/时， Nancy框架中的控制器类会首先通过 Uri查找对应的控制器，</span><span class='green'>这种机制被称为路由机制，这种路由机制也是 Nancy框架实现 Rest风格的 Web Service的核心。</span><span class='green'>当用户向服务器根目录 Uri发送 GET请求时，控制器会首先通过路由机制查找 GET[”/”]控制器，</span><a href='../sentence_detail/345.htm' target='right' class='orange' >在找到响应的控制器之后，用户请求会被对应的控制器进行处理。</a><span class='green'>而对应的控制器可能会调用对应的视图资源或模型资源来响应用户请求。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">166</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（2）视图遵循HTML作为其基本风格，在Nancy框架中，官方支持的视图引擎是Radar视图引擎，Radar引擎的语法与HTML基本类似。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">167</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（3）视图层将数据库组织成相应的对象，并支持大多数的ORM框架。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">168</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.10 本章小结</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">169</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>本章介绍了基于智能手机的指纹认证系统的相关技术，包括指纹识别技术、数字水印技术、二维码生成技术、SOA与Web Service技术、Nancy框架等。</span><span class='green'>由于指纹认证系统是一个复杂的综合性系统，因此需要进行交叉综合研究。</span><span class='green'>在论文中，我们也将结合以上多种核心技术来构建我们的指纹认证系统原型。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">170</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3 系统需求与建模分析</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">171</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>本章探讨的主要问题是模型与需求，将主要讨论指纹认证系统的安全策略问题，通过讨论相应的安全策略确立一种优良的系统解决方案模型，</span><span class='green'>在此基础上提出需求建模。</span><span class='green'>在本章中，首先我们会简要地分析系统安全威胁；</span><a href='../sentence_detail/357.htm' target='right' class='orange' >其次我们会讨论加强系统安全的传统解决方案；</a><span class='green'>然后我们提出了基于可逆数字水印的新的安全解决方案，并对其进行了逐步改进。</span><span class='green'>最后我们确立了解决方案模型和系统需求模型。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">172</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.11 安全威胁及其防御</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">173</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>为了发现指纹认证系统中的安全问题，首先我们需要从总体上了解Web系统中存在的安全威胁及其经典防御方案。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">174</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>在基于Web的指纹认证系统中将会产生以下几种安全问题：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">175</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（1）会话劫持[32]。</span><a href='../sentence_detail/364.htm' target='right' class='orange' >会话劫持的目的往往在于窃取信息内容本身。</a><a href='../sentence_detail/365.htm' target='right' class='orange' >这种类型的安全攻击通常被认为是数据安全威胁。</a><span class='green'>在指纹认证系统中，客户端需要通过网络向服务器端传输用户指纹数据，在传输过程中，一旦系统遭到攻击，</span><span class='green'>客户端发送的指纹图像数据就有可能遭到窃取，用户的身份数据就会遭到泄漏。</span><a href='../sentence_detail/368.htm' target='right' class='orange' >会话劫持的基本原理如图3.1所示。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">176</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图3.1 会话劫持原理</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">177</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（2）重放攻击[33]。</span><a href='../sentence_detail/371.htm' target='right' class='red' >重放攻击（ Replay Attacks）又称重播攻击、回放攻击或新鲜性攻击（ Freshness Attacks），是指攻击者发送一个目的主机已接收过的包，</a><a href='../sentence_detail/372.htm' target='right' class='red' >来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。</a><a href='../sentence_detail/373.htm' target='right' class='red' >攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。</a><a href='../sentence_detail/374.htm' target='right' class='red' >从这个解释上理解，加密可以有效防止会话劫持，但是却防止不了重放攻击。</a><a href='../sentence_detail/375.htm' target='right' class='red' >重放攻击任何网络通讯过程中都可能发生。</a><a href='../sentence_detail/376.htm' target='right' class='orange' >一个经典的重放攻击如图3.2所示。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">178</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图3.2 重放攻击示例</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">179</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>在上图中，Bob充当了服务器端的角色，Alice将其个人身份认证信息（用户名、密码）加密后发送给Bob进行认证并认证通过。</span><span class='green'>于此同时，网络中间人劫持了这次会话，中间人截获了 Alice向 Bob发送的认证数据，尽管该数据是加密的，</span><span class='green'>但中间攻击人并不需要知道数据真实的内容，他只是伪装成 Alice再次向 Bob发送了同样了认证信息，</span><span class='green'>Bob接收到了同样的认证信息，再次通过了网络中间人的认证请求，并将网络攻击人误认为是 Alice.重放攻击的基本原理如图3.3所示。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">180</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图3.3 重放攻击原理</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">181</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（3）数据篡改。</span><a href='../sentence_detail/384.htm' target='right' class='orange' >这种类型的网络攻击可以认为是重放攻击的扩展。</a><span class='green'>攻击者利用重放攻击破坏系统认证并进入系统，之后攻击者可以很容易地向服务器发送伪造的数据，</span><a href='../sentence_detail/386.htm' target='right' class='orange' >甚至可以对服务器系统进行 SQL注入攻击和系统数据篡改。</a><span class='green'>其基本模式如图3.4所示。</span>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_3.htm">上一页</a>
<a class="pagelink" href="paper_5.htm">下一页</a>
<a class="pagelink" href="paper_14.htm">尾页</a>
页码：4/14页
]
</div>

<br>
<div style="margin-left:8px">

<div style="text-align:center;background-color:#CA122C;margin-top:30px;overflow:hidden;">
<a href="http://www.paperpass.com/publish/index?from=ppreport" target="blank" style="display:block;"><img height="180" src="http://file.paperpass.com/images/fabiao.jpg"></a>
</div>

</div>
</div>


<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2015 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
