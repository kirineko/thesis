<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威中文论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>


<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_2.htm">上一页</a>
<a class="pagelink" href="paper_4.htm">下一页</a>
<a class="pagelink" href="paper_14.htm">尾页</a>
页码：3/14页
]
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">103</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/191.htm' target='right' class='orange' >指纹识别技术是任何指纹识别系统的核心和关键技术。</a><a href='../sentence_detail/192.htm' target='right' class='orange' >就指纹识别本身而言，大致可以分为以下5个步骤：</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">104</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第一步，指纹数据采集。</span><a href='../sentence_detail/194.htm' target='right' class='orange' >利用相应的图像采集设备获取指纹图像信息。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">105</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第二步，指纹预处理。</span><a href='../sentence_detail/196.htm' target='right' class='orange' >由于采集到的指纹图像是未经加工的，初步的。</a><span class='green'>因此，需要进行指纹图像的预处理，包括图像的增强处理，边缘检测，直方图均衡化等，经过处理的指纹图像应能达到下一步特征提取和匹配的要求。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">106</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第三步，特征提取。</span><a href='../sentence_detail/199.htm' target='right' class='orange' >根据指纹的特点，对指纹图像进行特征提取，获取指纹的特征点信息。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">107</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第四步，指纹匹配。</span><a href='../sentence_detail/201.htm' target='right' class='orange' >将两个指纹之间的特征点信息进行对比和匹配。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">108</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第五步，处理匹配结果。</span><span class='green'>根据指纹对比匹配的结果，判断两个指纹之间的相似度，决定指纹是否匹配成功[5]。</span><a href='../sentence_detail/204.htm' target='right' class='orange' >在指纹识别领域，采用FAR（认假率）和FRR（拒真率）来衡量指纹识别算法的好坏。</a><a href='../sentence_detail/205.htm' target='right' class='orange' >一般而言，一个好的指纹识别系统应该保证FAR和FRR尽可能的低。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">109</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/206.htm' target='right' class='red' >目前指纹识别技术发展比较成熟。</a><span class='green'>出现了一些着名的开源软件和一大批商业软件，比较有名的有美国国家标准与技术研究院 NBIS课题组开源的 NBIS指纹识别系统，</span><span class='green'>基于 NBIS的 SourceAFIS系统[6]，以及 CrossMatch公司的 U. Are. U SDK.许多指纹识别系统采用的指纹识别技术均基于此。</span><a href='../sentence_detail/209.htm' target='right' class='orange' >这里简要介绍一下NBIS指纹识别软件。</a><a href='../sentence_detail/210.htm' target='right' class='orange' >NBIS指纹识别软件是由美国国家标准与技术研究院NBIS课题组开源的指纹识别系统。</a><span class='green'>该系统可在类 Unix环境下运行，提供了 Mindtct特征提取工具， IMGTOOLS指纹图像处理工具，</span><a href='../sentence_detail/212.htm' target='right' class='orange' > BOZORTH3指纹匹配工具，在 Unix命令环境下可以方便地对指纹专有图像进行特征提取与处理。</a><span class='green'>由于NBIS系统比较复杂，对系统环境配置要求较高，因此出现了基于NBIS的SourceAFIS开源库。</span><span class='green'>SourceAFIS对NBIS进行了简化，抽取了Mindtct与BOZORTH3的核心功能，并与.net和Java技术相结合，提供了.net版本和Java版本更便于实际使用。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">110</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Chris Stein， Claudia Nickel 和 Christoph Busch[7] 使用上述相关技术给出了一个基于智能手机相机的指纹识别系统解决方案，并使用android手机开发了原型系统。</span><span class='green'>但是由于该系统并不是基于Web Service的，因此只实现了基本功能，许多安全性问题没有考虑。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">111</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.6 数字水印技术</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">112</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/218.htm' target='right' class='orange' >数字水印技术是保证信息来源真实可靠的重要的技术。</a><span class='green'>客户端对原始信息加水印可以保证信息来源的准确可靠，服务器接收到客户端发送的水印信息之后，</span><span class='green'>可以先分析水印信息，确保客户端的身份，之后在对水印信息进行去水印，对原始信息进行处理。</span><span class='green'>如果客户端在加水印过程中融合了时间戳技术[8]和挑战应答技术[9]，就可以保证系统的安全性，</span><span class='green'>加水印的数据既可以防止信息内容泄漏，又可以识别信息来源的真实性，防止重放攻击。</span><a href='../sentence_detail/223.htm' target='right' class='orange' >因此，数字水印技术是加强系统安全的不二选择。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">113</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/224.htm' target='right' class='orange' >客户端加水印，服务器端去水印。</a><a href='../sentence_detail/225.htm' target='right' class='orange' >这种数字水印技术被称为可逆数字水印技术，是水印技术发展的难点之一[10]。</a><a href='../sentence_detail/226.htm' target='right' class='orange' >实现数字水印的方法有很多，最基本的方法当属最低有效位算法[11]。</a><span class='green'>Waiton[12]最早提出了最低有效位算法来实现数字水印， Waiton使用图像中的低位信息存储密钥信息，</span><span class='green'>用图像中的其他位信息生成密钥信息，这样低位存储的密钥信息就成为数字水印。</span><a href='../sentence_detail/229.htm' target='right' class='orange' >用该种算法生成的可逆水印简单容易使用。</a><a href='../sentence_detail/230.htm' target='right' class='orange' >A.Z.Tirkel， R.G.van Schyndel， C.F.Osborne[13]基于最低有效位算法提出了二维数字水印技术，并讨论了该技术在JPEG图像转换的适用性。</a><a href='../sentence_detail/231.htm' target='right' class='orange' >Zhang Ning， Zang Ya-Li， Tian Jie[14]结合生物识别技术和密码技术提出了一个新的身份认证解决方案，并讨论了指纹识别技术和安全密钥技术的结合。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">114</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.7 ZXing开源框架</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">115</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>ZXing Project全称 zebra crossing[15]，是由 Google公司开源的条形码与二维码图像处理库，</span><a href='../sentence_detail/234.htm' target='right' class='orange' >能简单快速地生成和解析多种条形码和二维码，支持 UPC， EAN， Codebar， QR Code，</a><span class='green'>Data Matrix多种条形码标准，该开源库采用 Java实现，并提供了多种其他语言接口。</span><span class='green'>ZXing框架包含以下几大模块：</span><a href='../sentence_detail/237.htm' target='right' class='orange' >code模块，条形码编码解码核心模块；</a><span class='green'>JavaSe模块，JavaSe客户端模块；</span><span class='green'>Android模块，Android客户端模块；</span><span class='green'>Android-test模块，Android客户端测试模块；</span><span class='green'>Android-integration模块，支持Intent集成条形码预览；</span><span class='green'>Glass模块，简单的Google眼睛应用实例等。</span><span class='green'>使用Zxing框架，可以在系统中简单方便地集成条形码处理功能，大大简化了系统处理条形码和二维码的难度。</span><span class='green'>Eui-Hyun Jung 和 Seong-Yun Cho[16]研究了条形码技术和数字水印技术，然后提出了采用二维条形码的数字水印解决方案。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">116</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.8 SOA与Web Service</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">117</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/246.htm' target='right' class='orange' >SOA与Web Service技术是服务器端实现的重点与核心技术。</a><span class='green'>这里将进行重点探讨。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">118</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.9.5 SOA</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">119</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/249.htm' target='right' class='orange' >SOA[17]即是面向服务的架构（service-oriented architecture）.简单的说，SOA是开发应用系统的一种新架构，在基于SOA的系统中，应用程序的构建过程类似于服务组件的组合过程。</a><span class='green'>这些组件都是松耦合的并具有明确的接口定义，我们通常将这些组件称为服务。</span><a href='../sentence_detail/251.htm' target='right' class='orange' >SOA技术架构的优点是实现系统的跨平台性和优良的可扩展性。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">120</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/252.htm' target='right' class='orange' >举例而言，在我们的指纹认证系统中，我们需要实现一个 Android客户端和一个服务器端， Android客户端与服务器端通信，</a><a href='../sentence_detail/253.htm' target='right' class='orange' >调用服务器端提供的 API接口服务以实现录入指纹和指纹认证的功能。</a><span class='green'>在传统的软件体系结构下，客户端与服务器端的开发必须置于同一技术架构之下，</span><span class='green'>如果客户端采用 Android技术实现，相应的，服务端也必须采用 Java EE技术实现；</span><span class='green'>如果要开发Windows Phone的客户端，也必须开发对应的.net框架下的服务器程序。</span><span class='green'>这种传统的软件架构模型是一种紧凑的架构体系，其优势在于服务器与客户端紧密协作，共同依赖相同类型的核心组件。</span><a href='../sentence_detail/258.htm' target='right' class='orange' >然而，这种架构体系的缺点也是很明显的，最突出的问题的扩展性较差。</a><span class='green'>如果采用.net技术进行客户端的开发，那么也意味着服务器端也必须采用同样的技术，这种传统的软件架构模型不适应移动互联网时代的业务发展需求。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">121</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/260.htm' target='right' class='orange' >在移动互联网时代，一个服务往往需要支持多种客户端共同调用。</a><span class='green'>举例来说，社交软件” Line”就需要为多种客户端提供多种服务，比如登录服务既需要支持 PC客户端进行登录，</span><span class='green'>同时也要提供对 Android手机客户端和 iOS手机客户端的登录支持，甚至还要提供对 Web浏览器的登录支持。</span><span class='green'>如果我们采用传统的系统架构，我们需要为每一种平台编写服务端代码，然而许多服务代码都是类似甚至是重复的，</span><span class='green'>这样就不符合软件工程中的基本原则—— DRY[18]原则（ Don’ t Repeat Yourself）.在这种移动互联网的背景下，</span><span class='green'>SOA架构迅勐发展。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">122</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/266.htm' target='right' class='orange' >在SOA架构体系下，每一个应用功能被封装成服务，这些服务都是与具体平台无关的。</a><a href='../sentence_detail/267.htm' target='right' class='orange' >客户端与服务器端的通信通过消息传递进行。</a><span class='green'>通信的数据应符合数据传输的标准和规范，如 XML和 JSON.当客户端需要调用服务 API时，</span><a href='../sentence_detail/269.htm' target='right' class='orange' >客户端向对应的服务接口发一条消息，服务器端解析消息并响应客户端消息请求，</a><a href='../sentence_detail/270.htm' target='right' class='orange' >向客户端返回标准化数据，客户端解析标准化数据获取最终结果。</a><a href='../sentence_detail/271.htm' target='right' class='orange' >这样就实现了从面向具体技术的架构向面向服务的架构的迁移。</a><span class='green'>无论客户端采用android技术还是iOS技术，抑或是Web技术，甚至是桌面应用程序，他们都可以调用同一个服务接口，并且不需要修改服务器端代码。</span><span class='green'>SOA架构显着增强了系统的跨平台性和可扩展性，现在 SOA架构已然成为了移动互联网领域的主流架构模型，</span><span class='green'>而 Web Service[19]是实现 SOA体系的一种具体技术。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">123</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>典型的SOA模型如图2.1所示。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">124</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图2.1 SOA架构模型</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">125</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.9.6 Web Service</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">126</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Web Service技术是一种实现SOA最为通用和主流的技术。</span><span class='green'>它通过Web标准与协议提供Web服务。</span><a href='../sentence_detail/280.htm' target='right' class='orange' >Web Service的目的在于实现异构系统间的相互协作[20]。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">127</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>经过数年的发展，目前Web Service技术已经发展为以下两大主要类型：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">128</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（1）基于SOAP[21]的Web Service；</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">129</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（2）基于REST[22]的Web Service。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">130</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>基于SOAP的Web Service：</span><a href='../sentence_detail/285.htm' target='right' class='orange' > SOAP是简单对象访问协议的缩写，被用来描述信息传输的格式， WSDL[23]是网络服务描述语言的缩写，</a><a href='../sentence_detail/286.htm' target='right' class='orange' >用于描述 Web服务的公共接口， UDDI[24]是统一描述、发现和集成的缩写，</a><span class='green'>用于管理、发布和查询 Web Service.</span><a href='../sentence_detail/288.htm' target='right' class='orange' > SOAP使用两大应用广泛的协议——HTTP和XML.</a><span class='green'>HTTP被用来实现RPC风格的SOAP传输，XML是其编码形式。</span><span class='green'>通过SOAP，Web Service具有了优秀的扩展性，与特定技术、编程语言、平台的完全独立性。</span>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_2.htm">上一页</a>
<a class="pagelink" href="paper_4.htm">下一页</a>
<a class="pagelink" href="paper_14.htm">尾页</a>
页码：3/14页
]
</div>

<br>
<div style="margin-left:8px">

<div style="text-align:center;background-color:#CA122C;margin-top:30px;overflow:hidden;">
<a href="http://www.paperpass.com/publish/index?from=ppreport" target="blank" style="display:block;"><img height="180" src="http://file.paperpass.com/images/fabiao.jpg"></a>
</div>

</div>
</div>


<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2015 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
